import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # probabilities dict
    probabilities = {}
    # the number of page links on the current 'page'
    current_page_links = corpus[page]
    # total available pages in entire corpus
    total_pages = len(corpus)

    # the pages for which surfer can go to with a damping factor of 1-damping_factor
    for page in corpus:
        # initialize the probablities of the dictionary
        probabilities[page] = (1 - damping_factor) / total_pages

    if current_page_links:
        # assign probability for every link on the current page
        for link in current_page_links:
            probabilities[link] += damping_factor * 1/len(current_page_links)
    else:
        # probability for clicking on a random page
        for link in corpus:
            probabilities[link] += (1 - damping_factor)/total_pages

    return probabilities


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # compute distribution of PageRank values given damping factor
    pageRanks = {page: 0 for page in corpus}

    # first sample should be generated by choosing from a page at random
    curr_page = random.choice(list(corpus.keys()))

    for _ in range(n):
        # count for the current page (how many times curr page is visited, once already bc of previous line)
        pageRanks[curr_page] += 1

        # transition probabilities based on current page
        probabilities = transition_model(corpus, curr_page, damping_factor)

        # for remaining samples, next sample should be generated from prev. sample based on prev. sample's transition model
        next_page = random.choices(population=list(probabilities.keys()),
                                   weights=list(probabilities.values()), k=1)[0]

        # set the current page for next sampling to be next page
        curr_page = next_page

    # estimated PageRank value should be a value between 0 and 1, so all PageRank values sum up to 1
    # convert the counts probabilities by dividing the total number of samples
    for p in pageRanks:
        pageRanks[p] /= n

    return pageRanks


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # repeatedly calculate new rank values based on all the current rank values

    # assign each page a rank of 1/N where N is total num pages in corpus
    N = len(corpus)
    pageRanks = {page: 1/N for page in corpus}
    threshold = 0.001

    # check whether the values have converged, so no PageRank value changes by more than
    # 0.001 between the current values and new rank values
    converged = False

    while not converged:
        # new probabilities dict
        newPageRanks = {}

        for page in corpus:
            # initialize probability of new page rank
            newPageRank = (1 - damping_factor) / N
            # potential links that surfer can go to from this page
            for destinationPage in corpus:
                if page in corpus[destinationPage]:
                    # if the destinationPage links to current page, it allows for us to add
                    # the contribution of the destination page's page rank to the current page new rank
                    newPageRank += damping_factor * \
                        pageRanks[destinationPage] / len(corpus[destinationPage])
                elif len(corpus[destinationPage]) == 0:
                    # if the page has no links at all, it should be interpreted as having one link for every page in corpus
                    newPageRank += damping_factor * pageRanks[destinationPage] / N
            # set current page rank equal to new page rank based on destination page rank
            newPageRanks[page] = newPageRank

        count = 0
        # check for the convergence
        for page in corpus:
            # check whether PageRank value changes by more than 0.001 between
            # current rank values and new rank values
            rankChange = abs(pageRanks[page] - newPageRanks[page])
            if rankChange < threshold:
                count += 1

        converged = True if count == N else False

        # set the current page ranks to new rank values, so that you are not repeating iteration on same values
        pageRanks = newPageRanks

    return pageRanks


if __name__ == "__main__":
    main()
